000001 0000                  ;======================================================================
000002 0000                  ; Robot Virtual Machine
000003 0000                  ;======================================================================
000004 0000                  
000005 0000                  ;======================================================================
000006 0000                  ; Virtual machine fault codes
000007 0000                  ; These are the predefined ones..
000008 0000                  ;======================================================================
000009 0000                              .equ vNone,0                ; no fault
000010 0001                              .equ vHalt,1                ; halt fault
000011 0002                              .equ vIlleg,2               ; illegal instruction fault
000012 0003                              .equ vBound,3               ; bounds fault
000013 0004                              .equ vESUnd,4               ; eval stack underflow
000014 0005                              .equ vESOvf,5               ; eval stack overflow
000015 0006                              .equ vRSUnd,6               ; return stack underflow
000016 0007                              .equ vRSOvf,7               ; return stack overflow
000017 0000                  
000018 0000                  ;======================================================================
000019 0000                  ; *** CODE ***
000020 0000                  ;======================================================================
000021 0000                  
000022 0000                  ;======================================================================
000023 0000                  ; vminit
000024 0000                  ; Initialises the virtual machine
000025 0000                  ;   initialise the basic VM
000026 0000                  ;   set up the event list
000027 0000                  ;======================================================================
000028 0000 75E000           vminit:     mov acc,#0 					; set up basic RSP position in vmrstk
000029 0003 85E000           			mov vmrstk, acc				; LSB
                                    ^
  *****  Warning  ***** undefined symbol on second pass
000030 0006 85E001           			mov vmrstk+1, acc			; MSB
                                    ^
  *****  Warning  ***** undefined symbol on second pass
000031 0009 8000                         sjmp vmreset
000032 000B                  
000033 000B                  ;======================================================================
000034 000B                  ; vmreset
000035 000B                  ; Resets the virtual machine
000036 000B                  ; Reset ESP
000037 000B                  ; Reset RSP
000038 000B                  ; Reset IP to 0 (invalid)
000039 000B                  ;======================================================================
000040 000B 750000           vmreset:    mov vmFltc,#vNone           ; reset fault code
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000041 000E C200                         clr  vmfStop                ; reset stopped bit
                                              ^
  *****  Warning  ***** undefined symbol on second pass
000042 0010 79FE                         mov R1,#(vmestk-2)          ; reset evaluation stack (-2 for preinc)
                                                  ^
  *****  Warning  ***** undefined symbol on second pass
000043 0012 AC00                         mov R4,vmrstk               ; reset return stack LSB
                                                ^
  *****  Warning  ***** undefined symbol on second pass
000044 0014 AD01                         mov R5,vmrstk+1             ; reset return stack MSB
                                                ^
  *****  Warning  ***** undefined symbol on second pass
000045 0016 7E00                         mov R6,#0                   ; zero IP LSB
000046 0018 7F00                         mov R7,#0                   ; zero IP MSB
000047 001A 22                           ret
000048 001B                  
000049 001B                  ;======================================================================
000050 001B                  ; vmstart
000051 001B                  ; Starts up the virtual machine - vm is reset and then its IP is set
000052 001B                  ; to the start address pointed to by DPTR
000053 001B                  ;======================================================================
000054 001B 110B             vmstart:    acall vmreset
000055 001D AE82                         mov R6,dpl
000056 001F AF83                         mov R7,dph
000057 0021 22                           ret
000058 0022                  
000059 0022                  ;======================================================================
000060 0022                  ; vmrun
000061 0022                  ; Runs the vm until it hits a terminate instruction.
000062 0022                  ; VM must have had its IP set up by call to vmstart before hand
000063 0022                  ;======================================================================
000064 0022 200004           vmrun:      jb vmfStop,vmrune         ; abort if stopped bit is set
                                            ^
  *****  Warning  ***** undefined symbol on second pass
000065 0025 1139                         acall vmdisp              ; single tick
000066 0027 80F9                         sjmp vmrun                ; and do next instruction
000067 0029 22               vmrune:     ret
000068 002A                  
000069 002A                  ;======================================================================
000070 002A                  ; vmidle
000071 002A                  ; Determines whether the vm is idle (stopped)
000072 002A                  ; returns C set if so, clear if still running
000073 002A                  ;======================================================================
000074 002A 8500D7           vmidle:     mov cy,vmfStop
                                                ^
  *****  Warning  ***** undefined symbol on second pass
000075 002D 22                           ret
000076 002E                  
000077 002E                  ;======================================================================
000078 002E                  ; vmsrsp
000079 002E                  ; Sets the return stack pointer (defaults to 0)
000080 002E                  ; input - rsp value in dptr
000081 002E                  ;======================================================================
000082 002E 858200           vmsrsp:		mov vmrstk,dpl
                                          ^
  *****  Warning  ***** undefined symbol on second pass
000083 0031 858301           			mov vmrstk+1,dph
                                    ^
  *****  Warning  ***** undefined symbol on second pass
000084 0034 AC00                         mov R4,vmrstk               ; reset return stack LSB
                                                ^
  *****  Warning  ***** undefined symbol on second pass
000085 0036 AD01                         mov R5,vmrstk+1             ; reset return stack MSB
                                                ^
  *****  Warning  ***** undefined symbol on second pass
000086 0038 22               			ret
000087 0039                  
000088 0039                  ;======================================================================
000089 0039                  ; vmdisp
000090 0039                  ; Virtual Machine Dispatch routine.  Each time this is called it will
000091 0039                  ; execute one instruction in the virtual machine.
000092 0039                  ;======================================================================
000093 0039 8E82             vmdisp:     mov   dpl,R6          ; load IP into dptr
000094 003B 8F83                         mov   dph,R7
000095 003D E0                           movx  A,@dptr         ; get opcode
000096 003E A3                           inc   dptr
000097 003F                  
000098 003F F5F0                         mov   B,A
000099 0041 54C0                         anl   A,#0C0h         ;mask off top 2 bits
000100 0043 6024                         jz    vmdis0          ;0 - no literal
000101 0045 B44010                       cjne  A,#040h,vmdis1
000102 0048                              
000103 0048                              ;1 - single byte, read from instruction stream & push
000104 0048 E0                           movx  A,@dptr
000105 0049 A3                           inc   dptr
000106 004A 09                           inc   R1
000107 004B 09                           inc   R1
000108 004C F7                           mov   @R1,A
000109 004D                  
000110 004D                  			;sign extend
000111 004D 33               			rlc   A  		;sign bit to C
000112 004E 74FF             			mov   A,#255	
000113 0050 3400             			addc  A,#0		; 0 if C was set (-ve), FF if cleared
000114 0052 F4               			cpl   A			; so FF if was -ve, 0 if 0 or +ve
000115 0053 09                           inc   R1
000116 0054 F7                           mov   @R1,A
000117 0055 19                           dec   R1
000118 0056 8011                         sjmp  vmdis0
000119 0058                  
000120 0058 B4800C           vmdis1:     cjne  A,#080h,vmdis2
000121 005B                  
000122 005B                              ;2 - word, read from instruction stream & push
000123 005B E0                           movx  A,@dptr
000124 005C A3                           inc   dptr
000125 005D 09                           inc   R1
000126 005E 09                           inc   R1
000127 005F F7                           mov   @R1,A
000128 0060 09                           inc   R1
000129 0061 E0                           movx  A,@dptr
000130 0062 A3                           inc   dptr
000131 0063 F7                           mov   @R1,A
000132 0064 19                           dec   R1
000133 0065 8002                         sjmp  vmdis0
000134 0067                  
000135 0067                  vmdis2:     ; if we get here, the top 2 bits of the opcode are set
000136 0067                              ; and we have an illegal instruction
000137 0067 4107                         ajmp vmill
000138 0069                  
000139 0069                              ; vmdis0 - main dispatch point, any literals have already
000140 0069                              ; been pushed, the opcode is in B & the new IP is in dptr
000141 0069 AE82             vmdis0:     mov   R6,dpl          ; save new IP
000142 006B AF83                         mov   R7,dph
000143 006D E5F0                         mov   A,B
000144 006F 543F                         anl   A,#03Fh         ; zero operand size bits
000145 0071 23                           rl    A               ; 2 bytes per jump table entry
000146 0072 900076                       mov   dptr,#vmjmp     ; jump table base
000147 0075 73                           jmp   @A+dptr         
000148 0076                  
000149 0076 410D             vmjmp:      ajmp  vmnop     ;0   NOP                             ( no operation)
000150 0078 410E                         ajmp  vmadd     ;1   ADD     ia,ib  -  ia + ib       ( integer addition)
000151 007A 411C                         ajmp  vmsub     ;2   SUB     ia,ib  -  ia - ib       ( integer subtraction)
000152 007C 412B                         ajmp  vmmult    ;3   MULT    ia,ib  -  ia * ib       ( integer multiplication)
000153 007E 4148                         ajmp  vmdiv     ;4   DIV     ia,ib  -  ia / ib       ( integer division)
000154 0080 418E                         ajmp  vmmod     ;5   MOD     ia,ib  -  ia MOD ib     ( integer modulus)
000155 0082 41E8                         ajmp  vmand     ;6   AND     ia,ib  -  ia AND ib     ( bitwise and)
000156 0084 41F6                         ajmp  vmor      ;7   OR      ia,ib  -  ia OR ib      ( bitwise or)
000157 0086 6104                         ajmp  vmnot     ;8   NOT     ia     -  NOT ia        ( 1s complement)
000158 0088 413A                         ajmp  vmumul    ;9   UMUL	ua,ub  -  ua * ub       ( unsigned integer multiplication)
000159 008A 4157                         ajmp  vmudiv    ;10  UDIV	ua,ub  -  ua / ub       ( unsigned integer division)
000160 008C 419A                         ajmp  vmumod    ;11  UMOD	ua,ub  -  ua MOD ub     ( unsigned integer modulus)
000161 008E 41D1                         ajmp  vminc     ;12  INC     a		-  a+1		    ( increment )
000162 0090 41DC                         ajmp  vmdec     ;13  DEC	 a		-  a-1			( decrement )
000163 0092 4107                         ajmp  vmill     ;14  ILLEGAL
000164 0094 610E                         ajmp  vmequ     ;15  EQU     a,b    -  a = b         ( bitwise comparison )
000165 0096 612A                         ajmp  vmnequ    ;16  NEQU    a,b    -  a <> b        ( bitwise comparsion )
000166 0098 6146                         ajmp  vmlt      ;17  LT      a,b    -  a < b         ( integer comparison )
000167 009A 615A                         ajmp  vmgt      ;18  GT      a,b    -  a > b         ( integer comparsion )
000168 009C 6174                         ajmp  vmle      ;19  LE      a,b    -  a <= b        ( integer comparison )
000169 009E 618E                         ajmp  vmge      ;20  GE      a,b    -  a >= b        ( integer comparsion )
000170 00A0 61A2                         ajmp  vmdm      ;21  DIVMOD	 ia,ib  -  ia DIV ib, ia MOD ib (combined division/modulus)
000171 00A2 61C0                         ajmp  vmudm     ;22  UDIVMOD ua,ub  -  ua DIV ub, ua MOD ub (unsigned combinded division/modulus)
000172 00A4 61FF                         ajmp  vmmuld    ;23  MULDIV	 ia,ib,ic - (ia * ib) / ic (multiply to 32 bit & scale)
000173 00A6 810E                         ajmp  vmumd     ;24  UMULDIV ua,ub,uc - (ua * ub) / uc (unsigned multiply to 32 bit & scale)
000174 00A8 813F                         ajmp  vmzequ    ;25  ZEQU    bl     -  not-bl        ( boolean not (true if tos=0,else false)
000175 00AA 8150                         ajmp  vmbra     ;26  BRA     offset  -               ( relative branch (IP = IP+offset))
000176 00AC 815B                         ajmp  vmzbra    ;27  ZBRA    flg,off -               ( rel branch if tos = 0)
000177 00AE 816F                         ajmp  vmcall    ;28  CALL    addr    -               ( PUSH(RSP) IP, IP = addr)
000178 00B0 8189                         ajmp  vmenter   ;29  ENTER   n       -               ( set up stack frame for n bytes of locals)
000179 00B2 81AB                         ajmp  vmleave   ;30  LEAVE           -               ( unwind stack frame )
000180 00B4 81C2                         ajmp  vmret     ;31  RET             -               ( POP(RSP) -> IP )
000181 00B6 81D5                         ajmp  vmnret    ;32  NRET    n       -               ( POP(RSP)->IP, RSP-=N )
000182 00B8 81F3                         ajmp  vmccall   ;33  CCALL   addr    -               ( call C fn at addr)
000183 00BA 81FD                         ajmp  vmdup     ;34  DUP     n     -  n,n            ( duplicate TOS )
000184 00BC A109                         ajmp  vmover    ;35  OVER    a,b   -  a,b,a          ( pick 2nd TOS )
000185 00BE A117                         ajmp  vmdrop    ;36  DROP    a     -                 ( drop TOS )
000186 00C0 A11A                         ajmp  vmpick    ;37  PICK    (..)n -  (..) n-th item ( pick n-TOS )
000187 00C2 A12B                         ajmp  vmswap    ;38  SWAP    a,b   -  b,a            ( swap TOS and 2-TOS )
000188 00C4 A139                         ajmp  vmrepl    ;39  REPL    a,b   -  b              ( replace 2-TOS with TOS )
000189 00C6 A144                         ajmp  vmst      ;40  ST      v,a   -                 ( [a] = v)
000190 00C8 A156                         ajmp  vmld      ;41  LD      a     -  v              ( v = [a] )
000191 00CA A164                         ajmp  vmcst     ;42  CST     c,a   -                 ( character store)
000192 00CC A171                         ajmp  vmcld     ;43  CLD     a     -  c              ( character fetch)
000193 00CE A17C                         ajmp  vmdata    ;44  DATA                            ( skip n bytes,& push original IP)
000194 00D0 4107                         ajmp  vmill     ;45  ILLEGAL
000195 00D2 A18F                         ajmp  vmtor     ;46  TOR     n    -                  ( tos to return stack )
000196 00D4 A1A5                         ajmp  vmfromr   ;47  FROMR        - n                ( return stack to tos )
000197 00D6 A1BC                         ajmp  vmfpadd   ;48  FPADD   n    - FP+n             ( push FP+n )
000198 00D8 A1C5                         ajmp  vmfpld    ;49  FPLD    n    - val              ( return stack[FP+n] ->tos )
000199 00DA A1D7                         ajmp  vmfpst    ;50  FPST    v,n  -                  ( 2tos -> return stack[FP+n] )
000200 00DC 4107                         ajmp  vmill     ;51  ILLEGAL
000201 00DE 4107                         ajmp  vmill     ;52  ILLEGAL
000202 00E0 A1ED                         ajmp  vmfpcld   ;53  FPCLD   n    - c                ( return stack[FP+n] -> tos (char load ))
000203 00E2 A1FC                         ajmp  vmfpcst   ;54  FPCST   c,n  -                  ( 2tos -> (char) return stack[FP+n] )
000204 00E4 C10D                         ajmp  vmhalt    ;55  HALT            -               ( halt execution )
000205 00E6 C113                         ajmp  vmfault   ;56  FAULT   n       -               ( raise fault n & halt execution )
000206 00E8 C11B                         ajmp  vmbnd     ;57  BND     v,l,u - v               ( check l<=v<=u (integer), fault if not )
000207 00EA C141                         ajmp  vmalloc   ;58  ALLOC   n     - a               ( allocates n bytes on RS, returns its addr )
000208 00EC C154                         ajmp  vmmov     ;59  MOV     s,d,n -                 ( move n bytes from source to dest )
000209 00EE 4107                         ajmp  vmill     ;60  ILLEGAL
000210 00F0 4107                         ajmp  vmill     ;61  ILLEGAL
000211 00F2 4107                         ajmp  vmill     ;62  ILLEGAL
000212 00F4 C19A                         ajmp  vmesc     ;63  ESC     -                       ( prefix to 2 byte opcodes)
000213 00F6                  
000214 00F6                  ;======================================================================
000215 00F6                  ; Support routines
000216 00F6                  ;======================================================================
000217 00F6                  
000218 00F6                  ;======================================================================
000219 00F6                  ; umul32
000220 00F6                  ; Takes 2 16 bit integers pointed to by R0 & R1 (each points to LSB-
000221 00F6                  ; number stored LSB at lowest numbered address (big-endian)).
000222 00F6                  ; 
000223 00F6                  ; 32 bit product left in vpscratc workspace
000224 00F6                  ; 2 16 bit integers, ia & ib  ial,iah & ibl, ibh
000225 00F6                  ; algorithm as for long multiplication
000226 00F6                  ;           vpscratc +  3 2 1 0
000227 00F6                  ; ial * ibl                 B A
000228 00F6                  ; iah * ibl               B A
000229 00F6                  ; ial * ibh               B A
000230 00F6                  ; iah * ibh             B A
000231 00F6                  ;======================================================================
000232 00F6 E8               umul32:   mov   A,R0
000233 00F7 C0E0                       push  Acc
000234 00F9 E9                         mov   A,R1
000235 00FA C0E0                       push  Acc
000236 00FC                  
000237 00FC                            ; Clear results accumulator
000238 00FC E4                         clr   A
000239 00FD F502                       mov   vpscratc+2,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000240 00FF F503                       mov   vpscratc+3,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000241 0101                            ; note bytes 0 & 1 intitalised by ls multiplication
000242 0101                  
000243 0101                            ; ial * ibl - R0 & R1 already point to LS bytes
000244 0101 E7                         mov   A,@R1
000245 0102 86F0                       mov   B,@R0
000246 0104 A4                         mul   AB
000247 0105 F500                       mov   vpscratc+0,A    ; save LS partial product
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000248 0107 85F001                     mov   vpscratc+1,B  ; and MS partial product
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000249 010A                  
000250 010A                            ; iah * ibl
000251 010A 08                         inc   R0            ; R0 --> iah
000252 010B                  
000253 010B E7                         mov   A,@R1
000254 010C 86F0                       mov   B,@R0
000255 010E A4                         mul   AB
000256 010F 2501                       add   A,vpscratc+1  ; add LS partial product to existing
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000257 0111 F501                       mov   vpscratc+1,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000258 0113 E502                       mov   A,vpscratc+2
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000259 0115 35F0                       addc  A,B           ; add carry to B, result -> A
000260 0117 F502                       mov   vpscratc+2,A  ; MS partial product
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000261 0119 E503                       mov   A,vpscratc+3    
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000262 011B 3400                       addc  A,#0
000263 011D F503                       mov   vpscratc+3,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000264 011F                  
000265 011F                            ; ial * ibh
000266 011F 18                         dec   R0            ; R0 --> ial
000267 0120 09                         inc   R1            ; R1 --> ibh
000268 0121                  
000269 0121 E7                         mov   A,@R1
000270 0122 86F0                       mov   B,@R0
000271 0124 A4                         mul   AB
000272 0125 2501                       add   A,vpscratc+1  ; add LS partial product to existing
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000273 0127 F501                       mov   vpscratc+1,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000274 0129 E502                       mov   A,vpscratc+2
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000275 012B 35F0                       addc  A,B           ; add carry to B, result -> A
000276 012D F502                       mov   vpscratc+2,A  ; MS partial product
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000277 012F E503                       mov   A,vpscratc+3    
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000278 0131 3400                       addc  A,#0
000279 0133 F503                       mov   vpscratc+3,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000280 0135                  
000281 0135                            ; iah * ibh
000282 0135 08                         inc   R0            ; R0 --> iah
000283 0136                  
000284 0136 E7                         mov   A,@R1
000285 0137 86F0                       mov   B,@R0
000286 0139 A4                         mul   AB
000287 013A 2502                       add   A,vpscratc+2  ; save LS partial product
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000288 013C F502                       mov   vpscratc+2,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000289 013E E5F0                       mov   A,B
000290 0140 3503                       addc  A,vpscratc+3
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000291 0142 F503                       mov   vpscratc+3,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000292 0144                  
000293 0144 D0E0                       pop   Acc
000294 0146 F9                         mov   R1,A
000295 0147 D0E0                       pop   Acc
000296 0149 F8                         mov   R0,A
000297 014A                  
000298 014A 22                         ret
000299 014B                  
000300 014B                  ;======================================================================
000301 014B                  ; div_16
000302 014B                  ; 32 bit quotient in op_0 to op_3 (ls in op_0, ms in op_3),
000303 014B                  ; 16 bit divisor in R1:R0 (ms in R1, ls in R0)
000304 014B                  ; Result in OP
000305 014B                  ; Remainder in TMP
000306 014B                  ; Also uses A, R5, R6, R7
000307 014B                  ;======================================================================
000308 014B 7F00             div_16:   mov R7,#0
000309 014D 7E00                       mov R6,#0 ; zero out partial remainder
000310 014F 750000                     mov tmp_0, #0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000311 0152 750000                     mov tmp_1, #0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000312 0155 750000                     mov tmp_2, #0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000313 0158 750000                     mov tmp_3, #0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000314 015B                            
000315 015B 7D20                       mov R5,#32    ; loop count
000316 015D 3199             div_lp:   acall shiftd  ; Shift the dividend and return MSB in C
000317 015F EE                         mov A,R6      ; Shift carry into LSB of partial remainder
000318 0160 33                         rlc A
000319 0161 FE                         mov R6,A
000320 0162 EF                         mov A,R7
000321 0163 33                         rlc A
000322 0164 FF                         mov R7,A
000323 0165                            ; now test to see if R7:R6 >= R1:R0
000324 0165 400C                       jc cansub     ; Carry out of R7 shift means R7:R6 > R1:R0
000325 0167 C3                         clr C
000326 0168 EF                         mov A,R7      ; subtract R1 from R7 to see if R1 < R7
000327 0169 99                         subb A,R1     ; A = R7 - R1, carry set if R7 < R1
000328 016A 4011                       jc cantsub
000329 016C                            ; at this point R7>R1 or R7=R1
000330 016C 7005                       jnz cansub    ; jump if R7>R1
000331 016E                            ; if R7 = R1, test for R6>R0
000332 016E C3                         clr C
000333 016F EE                         mov A,R6
000334 0170 98                         subb A,R0     ; A = R6 - R0, carry set if R6 < R0
000335 0171 400A                       jc cantsub
000336 0173                  cansub:
000337 0173                            ; subtract divisor from the partial remainder
000338 0173 C3                         clr C
000339 0174 EE                         mov A,R6
000340 0175 98                         subb A,R0     ; A = R6 - R0
000341 0176 FE                         mov R6,A
000342 0177 EF                         mov A,R7
000343 0178 99                         subb A,R1     ; A = R7 - R1 - Borrow
000344 0179 FF                         mov R7,A
000345 017A D3                         setb C        ; shift one into the quotient
000346 017B 8001                       sjmp quot
000347 017D                  cantsub:
000348 017D                            ; shift a 0 into the quotient
000349 017D C3                         clr C
000350 017E                  quot:     
000351 017E                            ;shift the carry bit into the quotient
000352 017E 31AF                       acall shiftq
000353 0180                            
000354 0180                            ;test for completion
000355 0180 DDDB                       djnz R5,div_lp
000356 0182                  
000357 0182                            ; now all done- move TMP values back into OP
000358 0182 850000                     mov op_0,tmp_0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
                                                ^
  *****  Warning  ***** undefined symbol on second pass
000359 0185 850000                     mov op_1,tmp_1
                                           ^
  *****  Warning  ***** undefined symbol on second pass
                                                ^
  *****  Warning  ***** undefined symbol on second pass
000360 0188 850000                     mov op_2,tmp_2
                                           ^
  *****  Warning  ***** undefined symbol on second pass
                                                ^
  *****  Warning  ***** undefined symbol on second pass
000361 018B 850000                     mov op_3,tmp_3
                                           ^
  *****  Warning  ***** undefined symbol on second pass
                                                ^
  *****  Warning  ***** undefined symbol on second pass
000362 018E                            ; and remainder into TMP
000363 018E 8E00                       mov tmp_0,R6
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000364 0190 8F00                       mov tmp_1,R7
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000365 0192 750000                     mov tmp_2,#0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000366 0195 750000                     mov tmp_3,#0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000367 0198 22                         ret
000368 0199                  
000369 0199                  shiftd:   ;shift the dividend one bit to the left and return MSB in C
000370 0199 C3                         clr C
000371 019A E500                       mov A,op_0
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000372 019C 33                         rlc A
000373 019D F500                       mov op_0,A
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000374 019F E500                       mov A,op_1
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000375 01A1 33                         rlc A
000376 01A2 F500                       mov op_1,A
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000377 01A4 E500                       mov A,op_2
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000378 01A6 33                         rlc A
000379 01A7 F500                       mov op_2,A
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000380 01A9 E500                       mov A,op_3
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000381 01AB 33                         rlc A
000382 01AC F500                       mov op_3,A
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000383 01AE 22                         ret
000384 01AF                  
000385 01AF                  shiftq:   ;shift the quotient one bit to the left and shift C into LSB
000386 01AF E500                       mov A,tmp_0
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000387 01B1 33                         rlc A
000388 01B2 F500                       mov tmp_0,A
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000389 01B4 E500                       mov A,tmp_1
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000390 01B6 33                         rlc A
000391 01B7 F500                       mov tmp_1,A
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000392 01B9 E500                       mov A,tmp_2
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000393 01BB 33                         rlc A
000394 01BC F500                       mov tmp_2,A
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000395 01BE E500                       mov A,tmp_3
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000396 01C0 33                         rlc A
000397 01C1 F500                       mov tmp_3,A
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000398 01C3 22                         ret
000399 01C4                  
000400 01C4                  ;======================================================================
000401 01C4                  ; vmcmp
000402 01C4                  ; compare tos with 2 to, stack unchanged, 2tos - tos in vpscratc
000403 01C4                  ; a,b - a,b  (a-b -> scratch)
000404 01C4                  ; a>b scratch +ve & != 0
000405 01C4                  ; a<b scratch -ve
000406 01C4                  ; a>=b scratch +ve or 0
000407 01C4                  ; a<=b  scratch -ve or 0
000408 01C4                  ;======================================================================
000409 01C4 E9               vmcmp:    mov   A,R1
000410 01C5 F8                         mov   R0,A
000411 01C6 18                         dec   R0
000412 01C7 18                         dec   R0
000413 01C8 E6                         mov   A,@R0
000414 01C9 C3                         clr   C
000415 01CA 97                         subb  A,@R1
000416 01CB F500                       mov   vpscratc,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000417 01CD 08                         inc   R0
000418 01CE 09                         inc   R1
000419 01CF E6                         mov   A,@R0
000420 01D0 97                         subb  A,@R1
000421 01D1 F501                       mov   vpscratc+1,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000422 01D3 19                         dec   R1
000423 01D4 22                         ret
000424 01D5                  
000425 01D5                  ;======================================================================
000426 01D5                  ; vmm2p
000427 01D5                  ; Makes the top 2 entries on the evaluation stack +ve.  Used for 
000428 01D5                  ; signed multiplication, division and modulus.  The appropriate
000429 01D5                  ; sign information should be retrieved before calling this routine
000430 01D5                  ; so that the sign of the result can be correctly set
000431 01D5                  ;======================================================================
000432 01D5 09               vmm2p:	  inc R1
000433 01D6 E7               		  mov A,@R1
000434 01D7 19               		  dec R1
000435 01D8 30E70B           		  jnb Acc.7,vmm2p0 ; skip if ib is +ve or 0
000436 01DB 7400             		  mov A,#0
000437 01DD C3               		  clr C
000438 01DE 97               		  subb A,@R1
000439 01DF F7               		  mov @R1,A
000440 01E0 09               		  inc R1
000441 01E1 7400             		  mov A,#0
000442 01E3 97               		  subb A,@R1
000443 01E4 F7               		  mov  @R1,A
000444 01E5 19               		  dec R1
000445 01E6                  
000446 01E6 19               vmm2p0:	  dec R1			; to point to ms byte of lower word
000447 01E7 E7               		  mov A,@R1
000448 01E8 30E70B           		  jnb Acc.7,vmm2p1 ; skip if ia is +ve or 0
000449 01EB 19               		  dec R1
000450 01EC 7400             		  mov A,#0
000451 01EE C3               		  clr C
000452 01EF 97               		  subb A,@R1
000453 01F0 F7               		  mov @R1,A
000454 01F1 09               		  inc R1
000455 01F2 7400             		  mov A,#0
000456 01F4 97               		  subb A,@R1
000457 01F5 F7               		  mov  @R1,A
000458 01F6                  		
000459 01F6 09               vmm2p1:	  inc R1			; point back to ls byte of upper word
000460 01F7 22               		  ret	
000461 01F8                  
000462 01F8                  
000463 01F8                  ;======================================================================
000464 01F8                  ; vminvn
000465 01F8                  ; negate TOS if sign flag is set.  Used for signed multiplication,
000466 01F8                  ; division and modulus.  These are done as unsigned after the sign
000467 01F8                  ; of the result is worked out and the sign bit set appropriately
000468 01F8                  ;======================================================================
000469 01F8                  vminvn:	  ; invert sign of result if sign bit set.
000470 01F8 30000B           		  jnb vmsign,vmninv ; skip if sign bit clear
                                     ^
  *****  Warning  ***** undefined symbol on second pass
000471 01FB 7400             		  mov A,#0
000472 01FD C3               		  clr C
000473 01FE 97               		  subb A,@R1
000474 01FF F7               		  mov @R1,A
000475 0200 09               		  inc R1
000476 0201 7400             		  mov A,#0
000477 0203 97               		  subb A,@R1
000478 0204 F7               		  mov @R1,A
000479 0205 19               		  dec R1
000480 0206                  
000481 0206 22               vmninv:   ret
000482 0207                  
000483 0207                  ;======================================================================
000484 0207                  ; Virtual Machine Instruction Implementations
000485 0207                  ;======================================================================
000486 0207                  
000487 0207                  ;======================================================================
000488 0207                  ; ILLEGAL
000489 0207                  ; Illegal instruction.
000490 0207                  ;======================================================================
000491 0207 750002           vmill:    mov vmfltc,#vIlleg      ; illegal instruction fault
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000492 020A D200                       setb vmfStop             ; set stop flag
                                            ^
  *****  Warning  ***** undefined symbol on second pass
000493 020C 22                         ret
000494 020D                  
000495 020D                  ;======================================================================
000496 020D                  ; NOP
000497 020D                  ; No-operation
000498 020D                  ;======================================================================
000499 020D 22               vmnop:    ret
000500 020E                  
000501 020E                  ;======================================================================
000502 020E                  ; ADD     
000503 020E                  ; ia,ib  -  ia + ib       ( integer addition)
000504 020E                  ; enter with R1 pointing to lsb of ib (ibl)
000505 020E                  ;======================================================================
000506 020E E9               vmadd:    mov   A,R1    ; R0 --> ibl
000507 020F F8                         mov   R0,A
000508 0210 19                         dec   R1      ; R1 --> iah
000509 0211 19                         dec   R1      ; R1 --> ial
000510 0212 E7                         mov   A,@R1
000511 0213 26                         add   A,@R0
000512 0214 F7                         mov   @R1,A   ; Replace ial
000513 0215 09                         inc   R1      ; R1 --> iah
000514 0216 08                         inc   R0      ; R0 --> ibh
000515 0217 E7                         mov   A,@R1
000516 0218 36                         addc  A,@R0
000517 0219 F7                         mov   @R1,A   ; Replace iah
000518 021A 19                         dec   R1
000519 021B 22                         ret
000520 021C                  
000521 021C                  ;======================================================================
000522 021C                  ; SUB     
000523 021C                  ; ia,ib  -  ia - ib       ( integer subtraction)
000524 021C                  ; 2tos - tos
000525 021C                  ; ibh     
000526 021C                  ; ibl     <-- R1      R0
000527 021C                  ; iah             ==>
000528 021C                  ; ial                 R1
000529 021C                  ;======================================================================
000530 021C E9               vmsub:    mov   A,R1   ; R0 --> ibl
000531 021D F8                         mov   R0,A
000532 021E 19                         dec   R1      ; R1 --> iah
000533 021F 19                         dec   R1      ; R1 --> ial
000534 0220 C3                         clr   C
000535 0221 E7                         mov   A,@R1
000536 0222 96                         subb  A,@R0
000537 0223 F7                         mov   @R1,A   ; Replace ial
000538 0224 09                         inc   R1      ; R1 --> iah
000539 0225 08                         inc   R0      ; R0 --> ibh
000540 0226 E7                         mov   A,@R1
000541 0227 96                         subb  A,@R0
000542 0228 F7                         mov   @R1,A   ; Replace iah
000543 0229 19                         dec   R1      ; point back to lsb of result
000544 022A 22                         ret
000545 022B                  ;======================================================================
000546 022B                  ; MULT    
000547 022B                  ; ia,ib  -  ia * ib       ( integer multiplication)
000548 022B                  ; ibh     
000549 022B                  ; ibl     <-- R1
000550 022B                  ; iah     
000551 022B                  ; ial
000552 022B                  ; 
000553 022B                  ;======================================================================
000554 022B                  vmmult:   ; Capture sign information - xor sign bits of both words
000555 022B 09               		  inc R1
000556 022C E7               		  mov A,@R1 ; ibh
000557 022D 19               		  dec R1
000558 022E 19               		  dec R1
000559 022F 67               		  xrl A,@R1	; iah - if same sign bit 7 = 0
000560 0230 33               		  rlc A		; sign to carry
000561 0231 9200             		  mov vmsign,C
                                     ^
  *****  Warning  ***** undefined symbol on second pass
000562 0233 09               		  inc R1
000563 0234                  
000564 0234 31D5             		  acall vmm2p		; make sure operands +ve
000565 0236 513A             		  acall vmumul		; do unsigned multiplcation
000566 0238                  
000567 0238 21F8             		  ajmp vminvn		; invert result if needed
000568 023A                  
000569 023A                  ;======================================================================
000570 023A                  ; UMUL    
000571 023A                  ; ua,ub  -  ua * ub       ( unsigned integer multiplication)
000572 023A                  ;======================================================================
000573 023A E9               vmumul:   mov   A,R1   ; R0 --> ibl
000574 023B F8                         mov   R0,A
000575 023C 19                         dec   R1      ; R1 --> iah
000576 023D 19                         dec   R1      ; R1 --> ial
000577 023E                            
000578 023E 11F6                       acall umul32  ; result in vpscratc
000579 0240                  
000580 0240 E500                       mov A,vpscratc    ; lsb
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000581 0242 F7                         mov @R1,A
000582 0243 E501                       mov A,vpscratc+1  ; msb
                                             ^
  *****  Warning  ***** undefined symbol on second pass
000583 0245 18                         dec R0            ; pt to iah
000584 0246 F6                         mov @R0,A
000585 0247                  
000586 0247 22                         ret
000587 0248                  
000588 0248                  ;======================================================================
000589 0248                  ; DIV     
000590 0248                  ; ia,ib  -  ia / ib       ( integer division)
000591 0248                  ;======================================================================
000592 0248                  vmdiv:    ; Capture sign information - xor sign bits of both words
000593 0248 09               		  inc R1
000594 0249 E7               		  mov A,@R1 ; ibh
000595 024A 19               		  dec R1
000596 024B 19               		  dec R1
000597 024C 67               		  xrl A,@R1	; iah - if same sign bit 7 = 0
000598 024D 33               		  rlc A		; sign to carry
000599 024E 9200             		  mov vmsign,C
                                     ^
  *****  Warning  ***** undefined symbol on second pass
000600 0250 09               		  inc R1
000601 0251                  
000602 0251 31D5             		  acall vmm2p		; make sure operands +ve
000603 0253 5157             		  acall vmudiv		; do unsigned division
000604 0255                  
000605 0255 21F8             		  ajmp vminvn		; invert sign bit if needed
000606 0257                  
000607 0257                  ;======================================================================
000608 0257                  ; UDIV     
000609 0257                  ; ua,ub  -  ua / ub       ( unsigned integer division)
000610 0257                  ;======================================================================
000611 0257 ED               vmudiv:   mov A,R5
000612 0258 C0E0             		  push Acc
000613 025A EE               		  mov A,R6
000614 025B C0E0             		  push Acc
000615 025D EF               		  mov A,R7
000616 025E C0E0             		  push Acc
000617 0260                  
000618 0260 E9               		  mov A,R1
000619 0261 C0E0                       push Acc
000620 0263                  
000621 0263                  		  ; Load dividend
000622 0263 750000                     mov op_3,#0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000623 0266 750000                     mov op_2,#0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000624 0269 E9               		  mov A,R1
000625 026A F8                         mov R0,A
000626 026B 18               		  dec R0
000627 026C 8600             		  mov op_1,@R0
                                     ^
  *****  Warning  ***** undefined symbol on second pass
000628 026E 18               		  dec R0
000629 026F 8600             		  mov op_0,@R0
                                     ^
  *****  Warning  ***** undefined symbol on second pass
000630 0271                  
000631 0271                  		  ; Load divisor
000632 0271 E9               		  mov A,R1
000633 0272 F8               		  mov R0,A
000634 0273 09               		  inc R1
000635 0274 E7               		  mov A,@R1
000636 0275 F9               		  mov R1,A
000637 0276 E6               		  mov A,@R0
000638 0277 F8               		  mov R0,A
000639 0278                  
000640 0278 314B             		  acall div_16
000641 027A                  
000642 027A D0E0             		  pop Acc
000643 027C A9E0             		  mov R1,Acc
000644 027E                  		
000645 027E                  		  ;get quotient
000646 027E 19                         dec R1
000647 027F A700             		  mov @R1, op_1
                                          ^
  *****  Warning  ***** undefined symbol on second pass
000648 0281 19               		  dec R1
000649 0282 A700             		  mov @R1, op_0
                                          ^
  *****  Warning  ***** undefined symbol on second pass
000650 0284                  
000651 0284                  		  ; restore registers
000652 0284 D0E0             		  pop Acc
000653 0286 FF               		  mov R7,A
000654 0287 D0E0             		  pop Acc
000655 0289 FE               		  mov R6,A
000656 028A D0E0             		  pop Acc
000657 028C FD               		  mov R5,A
000658 028D 22                         ret
000659 028E                  
000660 028E                  ;======================================================================
000661 028E                  ; MOD     
000662 028E                  ; ia,ib  -  ia MOD ib     ( integer modulus)
000663 028E                  ; result takes sign of dividend (ia)
000664 028E                  ;======================================================================
000665 028E                  vmmod:    ; Capture sign information 
000666 028E 19               		  dec R1
000667 028F E7               		  mov A,@R1
000668 0290 33               		  rlc A		; sign to carry
000669 0291 9200             		  mov vmsign,C
                                     ^
  *****  Warning  ***** undefined symbol on second pass
000670 0293 09               		  inc R1
000671 0294                  
000672 0294 31D5             		  acall vmm2p		; make sure operands +ve
000673 0296 519A             		  acall vmumod		; do unsigned multiplcation
000674 0298                  
000675 0298 21F8             		  ajmp vminvn		; invert sign bit if needed
000676 029A                  
000677 029A                  ;======================================================================
000678 029A                  ; UMOD     
000679 029A                  ; ua,ub  -  ua UMOD ub    ( unsigned integer modulus)
000680 029A                  ;======================================================================
000681 029A ED               vmumod:   mov A,R5
000682 029B C0E0             		  push Acc
000683 029D EE               		  mov A,R6
000684 029E C0E0             		  push Acc
000685 02A0 EF               		  mov A,R7
000686 02A1 C0E0             		  push Acc
000687 02A3                  
000688 02A3 E9               		  mov A,R1
000689 02A4 C0E0                       push Acc
000690 02A6                  
000691 02A6                  		  ; Load dividend
000692 02A6 750000                     mov op_3,#0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000693 02A9 750000                     mov op_2,#0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000694 02AC E9               		  mov A,R1
000695 02AD F8                         mov R0,A
000696 02AE 18               		  dec R0
000697 02AF 8600             		  mov op_1,@R0
                                     ^
  *****  Warning  ***** undefined symbol on second pass
000698 02B1 18               		  dec R0
000699 02B2 8600             		  mov op_0,@R0
                                     ^
  *****  Warning  ***** undefined symbol on second pass
000700 02B4                  
000701 02B4                  		  ; Load divisor
000702 02B4 E9               		  mov A,R1
000703 02B5 F8               		  mov R0,A
000704 02B6 09               		  inc R1
000705 02B7 E7               		  mov A,@R1
000706 02B8 F9               		  mov R1,A
000707 02B9 E6               		  mov A,@R0
000708 02BA F8               		  mov R0,A
000709 02BB                  
000710 02BB 314B             		  acall div_16
000711 02BD                  
000712 02BD D0E0             		  pop Acc
000713 02BF A9E0             		  mov R1,Acc
000714 02C1                  		
000715 02C1                  		  ;get remainder
000716 02C1 19                         dec R1
000717 02C2 A700             		  mov @R1, tmp_1
                                          ^
  *****  Warning  ***** undefined symbol on second pass
000718 02C4 19               		  dec R1
000719 02C5 A700             		  mov @R1, tmp_0
                                          ^
  *****  Warning  ***** undefined symbol on second pass
000720 02C7                  
000721 02C7                  		  ; restore registers
000722 02C7 D0E0             		  pop Acc
000723 02C9 FF               		  mov R7,A
000724 02CA D0E0             		  pop Acc
000725 02CC FE               		  mov R6,A
000726 02CD D0E0             		  pop Acc
000727 02CF FD               		  mov R5,A
000728 02D0 22                         ret
000729 02D1                  
000730 02D1                  ;======================================================================
000731 02D1                  ; INC a - a+1
000732 02D1                  ;======================================================================
000733 02D1 E7               vminc:	  mov   A,@R1
000734 02D2 2401             		  add	A,#1
000735 02D4 F7               		  mov   @R1,A
000736 02D5 09               		  inc   R1
000737 02D6 E7               		  mov   A,@R1
000738 02D7 3400             		  addc	A,#0
000739 02D9 F7               		  mov   @R1,A
000740 02DA 19               		  dec   R1
000741 02DB 22               		  ret
000742 02DC                  
000743 02DC                  ;======================================================================
000744 02DC                  ; DEC a - a-1
000745 02DC                  ;======================================================================
000746 02DC C3               vmdec:	  clr   C
000747 02DD E7               		  mov   A,@R1
000748 02DE 9401             		  subb	A,#1
000749 02E0 F7               		  mov   @R1,A
000750 02E1 09               		  inc   R1
000751 02E2 E7               		  mov   A,@R1
000752 02E3 9400             		  subb	A,#0
000753 02E5 F7               		  mov   @R1,A
000754 02E6 19               		  dec   R1
000755 02E7 22               		  ret
000756 02E8                  
000757 02E8                  ;======================================================================
000758 02E8                  ; AND     
000759 02E8                  ; ia,ib  -  ia AND ib     ( bitwise and)
000760 02E8                  ;======================================================================
000761 02E8 E9               vmand:    mov   A,R1   ; R0 --> ibl
000762 02E9 F8                         mov   R0,A
000763 02EA 19                         dec   R1      ; R1 --> iah
000764 02EB 19                         dec   R1      ; R1 --> ial
000765 02EC E7                         mov   A,@R1
000766 02ED 56                         anl   A,@R0
000767 02EE F7                         mov   @R1,A   ; Replace ial
000768 02EF 09                         inc   R1      ; R1 --> iah
000769 02F0 08                         inc   R0      ; R0 --> ibh
000770 02F1 E7                         mov   A,@R1
000771 02F2 56                         anl   A,@R0
000772 02F3 F7                         mov   @R1,A   ; Replace iah
000773 02F4 19                         dec   R1
000774 02F5 22                         ret
000775 02F6                  ;======================================================================
000776 02F6                  ; OR      
000777 02F6                  ; ia,ib  -  ia OR ib      ( bitwise or)
000778 02F6                  ;======================================================================
000779 02F6 E9               vmor:     mov   A,R1   ; R0 --> ibl
000780 02F7 F8                         mov   R0,A
000781 02F8 19                         dec   R1      ; R1 --> iah
000782 02F9 19                         dec   R1      ; R1 --> ial
000783 02FA E7                         mov   A,@R1
000784 02FB 46                         orl   A,@R0
000785 02FC F7                         mov   @R1,A   ; Replace ial
000786 02FD 09                         inc   R1      ; R1 --> iah
000787 02FE 08                         inc   R0      ; R0 --> ibh
000788 02FF E7                         mov   A,@R1
000789 0300 46                         orl   A,@R0
000790 0301 F7                         mov   @R1,A   ; Replace iah
000791 0302 19                         dec   R1
000792 0303 22                         ret
000793 0304                  ;======================================================================
000794 0304                  ; NOT     
000795 0304                  ; ia     -  NOT ia        ( 1s complement)
000796 0304                  ;======================================================================
000797 0304 E9               vmnot:    mov A,r1
000798 0305 F8                         mov R0,A
000799 0306                            
000800 0306 E6                         mov A,@R0
000801 0307 F4                         cpl A
000802 0308 F6                         mov @R0,A
000803 0309                  
000804 0309 08                         inc R0
000805 030A                  
000806 030A E6                         mov A,@R0
000807 030B F4                         cpl A
000808 030C F6                         mov @R0,A
000809 030D                  
000810 030D 22                         ret          
000811 030E                  
000812 030E                  ;======================================================================
000813 030E                  ; EQU     a,b    -  a = b         ( bitwise comparison )
000814 030E                  ;======================================================================
000815 030E E9               vmequ:    mov   A,R1   ; R0 --> ibl
000816 030F F8                         mov   R0,A
000817 0310 19                         dec   R1      ; R1 --> iah
000818 0311 19                         dec   R1      ; R1 --> ial
000819 0312 E7                         mov   A,@R1
000820 0313 66                         xrl   A,@R0
000821 0314 F5F0                       mov   B,A
000822 0316 08                         inc   R0
000823 0317 09                         inc   R1
000824 0318 E7                         mov   A,@R1
000825 0319 66                         xrl   A,@R0
000826 031A 45F0                       orl   A,B     ; if both words were equal: A now 0.
000827 031C 75F000                     mov   B,#0    ; false
000828 031F 7003                       jnz   vmequt  ; jump if not the same (put false)
000829 0321 75F0FF                     mov   B,#0ffh; ; true
000830 0324 A7F0             vmequt:   mov   @R1,B
000831 0326 19                         dec   R1
000832 0327 A7F0                       mov   @R1,B
000833 0329 22                         ret
000834 032A                  
000835 032A                  ;======================================================================
000836 032A                  ; NEQU    a,b    -  a <> b        ( bitwise comparsion )
000837 032A                  ;======================================================================
000838 032A E9               vmnequ:   mov   A,R1   ; R0 --> ibl
000839 032B F8                         mov   R0,A
000840 032C 19                         dec   R1      ; R1 --> iah
000841 032D 19                         dec   R1      ; R1 --> ial
000842 032E E7                         mov   A,@R1
000843 032F 66                         xrl   A,@R0
000844 0330 F5F0                       mov   B,A
000845 0332 08                         inc   R0
000846 0333 09                         inc   R1
000847 0334 E7                         mov   A,@R1
000848 0335 66                         xrl   A,@R0
000849 0336 45F0                       orl   A,B     ; if both words were equal: A now 0.
000850 0338 75F000                     mov   B,#0    ; false
000851 033B 6003                       jz   vmnequf  ; jump if the same (put false)
000852 033D 75F0FF                     mov   B,#0ffh; ; true
000853 0340 A7F0             vmnequf:  mov   @R1,B
000854 0342 19                         dec   R1
000855 0343 A7F0                       mov   @R1,B
000856 0345 22                         ret
000857 0346                  
000858 0346                  ;======================================================================
000859 0346                  ; LT      a,b    -  a < b         ( integer comparison )
000860 0346                  ; If a<b then a-b should be -ve.
000861 0346                  ; Hence if sign bit of (a-b) result is set, return true, else return
000862 0346                  ; false.
000863 0346                  ;======================================================================
000864 0346 31C4             vmlt:     acall vmcmp
000865 0348 75F000                     mov   B,#0            ; default result of false
000866 034B E501                       mov   A,vpscratc+1    ; ms byte of result
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000867 034D 30E703                     jnb   ACC.7,vmltf     ; skip if false
000868 0350 75F0FF                     mov   B,#0FFh
000869 0353 E5F0             vmltf:    mov   A,B
000870 0355 19               		  dec   R1
000871 0356 F7                         mov   @R1,A
000872 0357 19                         dec   R1
000873 0358 F7                         mov   @R1,A
000874 0359 22                         ret
000875 035A                  
000876 035A                  ;======================================================================
000877 035A                  ; GT      a,b    -  a > b         ( integer comparsion )
000878 035A                  ; if a>b then a-b is +ve & non-zero
000879 035A                  ;======================================================================
000880 035A 31C4             vmgt:     acall vmcmp
000881 035C 75F000                     mov   B,#0            ; default result of false
000882 035F E500                       mov   A,vpscratc
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000883 0361 4501                       orl   A,vpscratc+1    ; zero if result is zero
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000884 0363 6008                       jz    vmgtf           ; return false if zero
000885 0365 E501                       mov   A,vpscratc+1    ; ms byte of result
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000886 0367 20E703                     jb   ACC.7,vmgtf      ; false if sign bit is set
000887 036A 75F0FF                     mov   B,#0FFh
000888 036D E5F0             vmgtf:    mov   A,B
000889 036F 19               		  dec   R1
000890 0370 F7                         mov   @R1,A
000891 0371 19                         dec   R1
000892 0372 F7                         mov   @R1,A
000893 0373 22                         ret
000894 0374                  
000895 0374                  ;======================================================================
000896 0374                  ; LE      a,b    -  a <= b        ( integer comparison )
000897 0374                  ; if a<=b then a-b is -ve or zero
000898 0374                  ; Note- this is the same as vmgt with the values of true & false
000899 0374                  ; swapped over as a<=b == !(a>b)
000900 0374                  ;======================================================================
000901 0374 31C4             vmle:     acall vmcmp
000902 0376 75F0FF                     mov   B,#0FFh         ; default result of true
000903 0379 E500                       mov   A,vpscratc
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000904 037B 4501                       orl   A,vpscratc+1    ; zero if result is zero
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000905 037D 6008                       jz    vmlet           ; return true if zero
000906 037F E501                       mov   A,vpscratc+1    ; ms byte of result
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000907 0381 20E703                     jb   ACC.7,vmlet      ; true if sign bit is set
000908 0384 75F000                     mov   B,#0            ; set false
000909 0387 E5F0             vmlet:    mov   A,B
000910 0389 19                         dec   R1
000911 038A F7                         mov   @R1,A
000912 038B 19                         dec   R1
000913 038C F7                         mov   @R1,A
000914 038D 22                         ret
000915 038E                  
000916 038E                  ;======================================================================
000917 038E                  ; GE      a,b    -  a >= b        ( integer comparsion )
000918 038E                  ; if a>=b then a-b is +ve or zero (sign bit not set)
000919 038E                  ;======================================================================
000920 038E 31C4             vmge:     acall vmcmp
000921 0390 75F000                     mov   B,#0            ; default result of false
000922 0393 E501                       mov   A,vpscratc+1    ; ms byte of result
                                               ^
  *****  Warning  ***** undefined symbol on second pass
000923 0395 20E703                     jb    ACC.7,vmgef     ; if -ve is false
000924 0398 75F0FF                     mov   B,#0FFh
000925 039B E5F0             vmgef:    mov   A,B
000926 039D 19                         dec   R1
000927 039E F7                         mov   @R1,A
000928 039F 19                         dec   R1
000929 03A0 F7                         mov   @R1,A
000930 03A1 22                         ret
000931 03A2                  
000932 03A2                  ;======================================================================
000933 03A2                  ; DIVMOD	 ia,ib  -  ia DIV ib, ia MOD ib (combined division/modulus)
000934 03A2                  ;======================================================================
000935 03A2                  vmdm:   
000936 03A2                  		; capture sign for div
000937 03A2 09               		inc R1
000938 03A3 E7               		mov A,@R1 ; ibh
000939 03A4 19               		dec R1
000940 03A5 19               		dec R1
000941 03A6 67               		xrl A,@R1	; iah - if same sign bit 7 = 0
000942 03A7 33               		rlc A		; sign to carry
000943 03A8 9200             		mov vmsgn2,C
                                   ^
  *****  Warning  ***** undefined symbol on second pass
000944 03AA                  
000945 03AA                  		; capture sign for mod
000946 03AA E7               		mov A,@R1
000947 03AB 33               		rlc A		; sign to carry
000948 03AC 9200             		mov vmsign,C
                                   ^
  *****  Warning  ***** undefined symbol on second pass
000949 03AE 09               		inc R1
000950 03AF                  
000951 03AF 31D5             		acall vmm2p 	; make operands +ve
000952 03B1 71C0             		acall vmudm		; do unsigned div-mod
000953 03B3 31F8             		acall vminvn	; invert modulus if vmsign set
000954 03B5                  
000955 03B5                  		; invert quotient if vmsgn2 set
000956 03B5 19               		dec R1
000957 03B6 19               		dec R1
000958 03B7 A200             		mov C,vmsgn2
                                     ^
  *****  Warning  ***** undefined symbol on second pass
000959 03B9 9200             		mov vmsign,C
                                   ^
  *****  Warning  ***** undefined symbol on second pass
000960 03BB 31F8             		acall vminvn
000961 03BD 09               		inc R1
000962 03BE 09               		inc R1
000963 03BF                  
000964 03BF 22               		ret
000965 03C0                  
000966 03C0                  
000967 03C0                  ;======================================================================
000968 03C0                  ; UDIVMOD ua,ub  -  ua DIV ub, ua MOD ub (unsigned combinded division/modulus)
000969 03C0                  ;======================================================================
000970 03C0 ED               vmudm:    mov A,R5
000971 03C1 C0E0             		  push Acc
000972 03C3 EE               		  mov A,R6
000973 03C4 C0E0             		  push Acc
000974 03C6 EF               		  mov A,R7
000975 03C7 C0E0             		  push Acc
000976 03C9                  
000977 03C9 E9               		  mov A,R1
000978 03CA C0E0                       push Acc
000979 03CC                  
000980 03CC                  		  ; Load dividend
000981 03CC 750000                     mov op_3,#0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000982 03CF 750000                     mov op_2,#0
                                           ^
  *****  Warning  ***** undefined symbol on second pass
000983 03D2 E9               		  mov A,R1
000984 03D3 F8                         mov R0,A
000985 03D4 18               		  dec R0
000986 03D5 8600             		  mov op_1,@R0
                                     ^
  *****  Warning  ***** undefined symbol on second pass
000987 03D7 18               		  dec R0
000988 03D8 8600             		  mov op_0,@R0
                                     ^
  *****  Warning  ***** undefined symbol on second pass
000989 03DA                  
000990 03DA                  		  ; Load divisor
000991 03DA E9               		  mov A,R1
000992 03DB F8               		  mov R0,A
000993 03DC 09               		  inc R1
000994 03DD E7               		  mov A,@R1
000995 03DE F9               		  mov R1,A
000996 03DF E6               		  mov A,@R0
000997 03E0 F8               		  mov R0,A
000998 03E1                  
000999 03E1 314B             		  acall div_16
001000 03E3                  
001001 03E3 D0E0             		  pop Acc
001002 03E5 A9E0             		  mov R1,Acc
001003 03E7                  
001004 03E7 A8E0             		  mov R0,Acc
001005 03E9 08               		  inc R0    ; point to msb of dest for remainder
001006 03EA                  
001007 03EA                  		  ;get remainder
001008 03EA A600             		  mov @R0, tmp_1
                                          ^
  *****  Warning  ***** undefined symbol on second pass
001009 03EC 18               		  dec R0
001010 03ED A600             		  mov @R0, tmp_0
                                          ^
  *****  Warning  ***** undefined symbol on second pass
001011 03EF                  
001012 03EF                  		  ;get quotient
001013 03EF 18                         dec R0
001014 03F0 A600             		  mov @R0, op_1
                                          ^
  *****  Warning  ***** undefined symbol on second pass
001015 03F2 18               		  dec R0
001016 03F3 A600             		  mov @R0, op_0
                                          ^
  *****  Warning  ***** undefined symbol on second pass
001017 03F5                  
001018 03F5                  		  ; restore registers
001019 03F5 D0E0             		  pop Acc
001020 03F7 FF               		  mov R7,A
001021 03F8 D0E0             		  pop Acc
001022 03FA FE               		  mov R6,A
001023 03FB D0E0             		  pop Acc
001024 03FD FD               		  mov R5,A
001025 03FE 22                         ret
001026 03FF                  
001027 03FF                  ;======================================================================
001028 03FF                  ; MULDIV	 ia,ib,ic - (ia * ib) / ic (multiply to 32 bit & scale)
001029 03FF                  ;======================================================================
001030 03FF E9               vmmuld: mov A,r1
001031 0400 F8               		mov r0,A
001032 0401                  
001033 0401 E6               		mov A,@R0
001034 0402                  
001035 0402 18               		dec R0
001036 0403 18               		dec R0
001037 0404 66               		xrl A,@R0
001038 0405                  
001039 0405 18               		dec R0
001040 0406 18               		dec R0
001041 0407 66               		xrl A,@R0
001042 0408                  
001043 0408 000000           		-WIP HERE
                               ^
  *****  Warning  ***** undefined opcode
001044 040B 910E             		acall vmumd
001045 040D 22               		ret
001046 040E                  
001047 040E                  ;======================================================================
001048 040E                  ; UMULDIV ua,ub,uc - (ua * ub) / uc (unsigned multiply to 32 bit & scale)
001049 040E                  ;======================================================================
001050 040E                  vmumd:     
001051 040E ED               		mov A,R5
001052 040F C0E0             		push Acc
001053 0411 EE               		mov A,R6
001054 0412 C0E0             		push Acc
001055 0414 EF               		mov A,R7
001056 0415 C0E0             		push Acc
001057 0417                  
001058 0417 19               		dec R1			; ignore divisor for the time being
001059 0418 19               		dec R1
001060 0419                  
001061 0419 E9               		mov A,R1
001062 041A C0E0             		push Acc
001063 041C                  
001064 041C                  		; Do the 16x16 mult to vpscratc
001065 041C E9               		mov   A,R1   
001066 041D F8               		mov   R0,A
001067 041E 18               		dec   R0      
001068 041F 18               		dec   R0      
001069 0420 11F6             		acall umul32  ; (R0) * (R1) -> result in vpscratc
001070 0422                  
001071 0422                  
001072 0422                  		; 16 bit divisor in R1:R0 (ms in R1, ls in R0)
001073 0422 09               		inc R1
001074 0423 09               		inc R1
001075 0424 E7               		mov A,@R1
001076 0425 F8               		mov R0,A
001077 0426 09               		inc R1
001078 0427 E7               		mov A,@R1
001079 0428 F9               		mov R1,A
001080 0429                  
001081 0429 314B             		acall div_16
001082 042B                  
001083 042B D0E0             		pop Acc
001084 042D A9E0             		mov R1,Acc
001085 042F                  
001086 042F                  		;get quotient
001087 042F 19               		dec R1
001088 0430 A700             		mov @R1, op_1
                                        ^
  *****  Warning  ***** undefined symbol on second pass
001089 0432 19               		dec R1
001090 0433 A700             		mov @R1, op_0
                                        ^
  *****  Warning  ***** undefined symbol on second pass
001091 0435                  
001092 0435                  		; restore registers
001093 0435 D0E0             		pop Acc
001094 0437 FF               		mov R7,A
001095 0438 D0E0             		pop Acc
001096 043A FE               		mov R6,A
001097 043B D0E0             		pop Acc
001098 043D FD               		mov R5,A
001099 043E 22               		ret
001100 043F                  
001101 043F                  
001102 043F                  
001103 043F                  		  
001104 043F                  ;======================================================================
001105 043F                  ; ZEQU    bl     -  not-bl        ( boolean not (true if tos=0,else false)
001106 043F                  ;======================================================================
001107 043F E7               vmzequ:   mov   A,@R1
001108 0440 09                         inc   R1
001109 0441 47                         orl   A,@R1
001110 0442 75F0FF                     mov   B,#0FFH
001111 0445 6003                       jz    vmzeqt
001112 0447 75F000                     mov   B,#0
001113 044A A7F0             vmzeqt:   mov   @R1,B
001114 044C 19                         dec   R1
001115 044D A7F0                       mov   @R1,B
001116 044F 22                         ret
001117 0450                  
001118 0450                  ;======================================================================
001119 0450                  ; BRA     offset  -               ( relative branch (IP = IP+offset))
001120 0450                  ;======================================================================
001121 0450 E7               vmbra:    mov   A,@R1   ; lsb of offset
001122 0451 2E                         add   A,R6    ; add lsb of IP
001123 0452 FE                         mov   R6,A
001124 0453 09                         inc   R1
001125 0454 E7                         mov   A,@R1
001126 0455 3F                         addc  A,R7    ; add msb of IP
001127 0456 FF                         mov   R7,A
001128 0457 19                         dec   R1
001129 0458 19                         dec   R1
001130 0459 19                         dec   R1
001131 045A 22                         ret
001132 045B                  
001133 045B                  ;======================================================================
001134 045B                  ; ZBRA    flg,off -               ( rel branch if tos = 0)
001135 045B                  ;======================================================================
001136 045B E9               vmzbra:   mov A,R1
001137 045C F8                         mov R0,A
001138 045D 18                         dec R0
001139 045E E6                         mov A,@R0
001140 045F 18                         dec R0
001141 0460 46                         orl A,@R0     ; A=0 iff TOS= 0;
001142 0461 7007                       jnz vmzbrf    ; skiip if not 0
001143 0463                  
001144 0463                            ; Add TOS to IP
001145 0463 E7                         mov   A,@R1   ; lsb of offset
001146 0464 2E                         add   A,R6    ; add lsb of IP
001147 0465 FE                         mov   R6,A
001148 0466 09                         inc   R1
001149 0467 E7                         mov   A,@R1
001150 0468 3F                         addc  A,R7    ; add msb of IP
001151 0469 FF                         mov   R7,A
001152 046A                  
001153 046A 18               vmzbrf:   dec R0
001154 046B 18                         dec R0
001155 046C E8                         mov A,R0
001156 046D F9                         mov R1,A
001157 046E 22                         ret
001158 046F                  
001159 046F                  ;======================================================================
001160 046F                  ; CALL    addr    -               ( PUSH(RSP) IP, IP = addr)
001161 046F                  ;======================================================================
001162 046F EC               vmcall:   mov   A,R4    ; RSP Low
001163 0470 2402                       add   A,#2    ; Bump RSP for return addr
001164 0472 FC                         mov   R4,A
001165 0473 F582                       mov   dpl,A
001166 0475 ED                         mov   A,R5
001167 0476 3400                       addc  A,#0
001168 0478 FD                         mov   R5,A
001169 0479 F583                       mov   dph,A
001170 047B                            ; RSP now incremented & dptr pts to where
001171 047B                            ; return address should go. - write IP
001172 047B                            ; to RSP
001173 047B EE                         mov  a,R6
001174 047C F0                         movx @dptr,A
001175 047D A3                         inc  dptr
001176 047E EF                         mov  a,R7
001177 047F F0                         movx @dptr,A
001178 0480                  
001179 0480                            ; Now load up the call address into IP.
001180 0480 E7                         mov   A,@R1 
001181 0481 FE                         mov   R6,A
001182 0482 09                         inc   R1
001183 0483 E7                         mov   A,@R1
001184 0484 FF                         mov   R7,A
001185 0485 19                         dec   R1
001186 0486 19                         dec   R1
001187 0487 19                         dec   R1
001188 0488                  
001189 0488 22                         ret
001190 0489                  
001191 0489                  ;======================================================================
001192 0489                  ; ENTER   n       -               ( set up stack frame for n bytes of locals)
001193 0489                  ;======================================================================
001194 0489 EC               vmenter:  mov   A,R4      ; Get rsp -> dptr
001195 048A F582                       mov   dpl,A
001196 048C ED                         mov   A,R5
001197 048D F583                       mov   dph,A
001198 048F                  
001199 048F A3                         inc   dptr      ; bump RSP (pre-increment)
001200 0490 A3                         inc   dptr
001201 0491                  
001202 0491 E582                       mov   A,dpl     ; save new stack ptr
001203 0493 FC                         mov   R4,A
001204 0494 E583                       mov   A,dph
001205 0496 FD                         mov   R5,A
001206 0497                  
001207 0497 EA                         mov   A,R2      ; write FP to stack
001208 0498 F0                         movx  @dptr,A
001209 0499 A3                         inc   dptr
001210 049A EB                         mov   A,R3
001211 049B F0                         movx  @dptr,A
001212 049C                  
001213 049C                            ; RSP->FP
001214 049C EC                         mov   A,R4
001215 049D FA                         mov   R2,A
001216 049E ED                         mov   A,R5
001217 049F FB                         mov   R3,A
001218 04A0                  
001219 04A0                            ; RSP+=N
001220 04A0 EC                         mov   A,R4
001221 04A1 27                         add   A,@R1
001222 04A2 FC                         mov   R4,A
001223 04A3 09                         inc   R1
001224 04A4 ED                         mov   A,R5
001225 04A5 37                         addc  A,@R1
001226 04A6 FD                         mov   R5,A
001227 04A7 19                         dec   R1
001228 04A8 19                         dec   R1
001229 04A9 19                         dec   R1
001230 04AA                  
001231 04AA 22                         ret
001232 04AB                  
001233 04AB                  ;======================================================================
001234 04AB                  ; LEAVE           -               ( unwind stack frame )
001235 04AB                  ;======================================================================
001236 04AB EA               vmleave:  mov   A,R2      ; FP->RSP
001237 04AC FC                         mov   R4,A
001238 04AD EB                         mov   A,R3
001239 04AE FD                         mov   R5,A
001240 04AF                  
001241 04AF                            ; POP FP (leaving dptr pointing to old TOS)
001242 04AF EC                         mov   A,R4
001243 04B0 F582                       mov   dpl,A
001244 04B2 C3                         clr   C
001245 04B3 9402                       subb  A,#2
001246 04B5 FC                         mov   R4,A
001247 04B6                  
001248 04B6 ED                         mov   A,R5
001249 04B7 F583                       mov   dph,A
001250 04B9 9400                       subb  A,#0
001251 04BB FD                         mov   R5,A
001252 04BC                  
001253 04BC E0                         movx  A,@dptr ; get old FP
001254 04BD FA                         mov   R2,A
001255 04BE A3                         inc   dptr
001256 04BF E0                         movx  A,@dptr
001257 04C0 FB                         mov   R3,A
001258 04C1                  
001259 04C1 22                         ret
001260 04C2                  
001261 04C2                  ;======================================================================
001262 04C2                  ; RET             -               ( POP(RSP) -> IP )
001263 04C2                  ;======================================================================
001264 04C2 EC               vmret:    mov   A,R4      ; RSP low
001265 04C3 F582                       mov   dpl,A
001266 04C5 C3                         clr   C     
001267 04C6 9402                       subb  A,#2
001268 04C8 FC                         mov   R4,A
001269 04C9 ED                         mov   A,R5      ; RSP high
001270 04CA F583                       mov   dph,A
001271 04CC 9400                       subb  A,#0
001272 04CE FD                         mov   R5,A
001273 04CF                            ; RSP is decremented by 2 bytes, old tos (return addr)
001274 04CF                            ; is now pointed to by DPTR
001275 04CF E0                         movx  A,@dptr   ; return address ls byte
001276 04D0 FE                         mov   R6,A      ; stuff in IP low
001277 04D1 A3                         inc   dptr
001278 04D2 E0                         movx  A,@dptr   ; return address ms byte
001279 04D3 FF                         mov   R7,A      ; stuff in IP high
001280 04D4                  
001281 04D4 22                         ret
001282 04D5                  
001283 04D5                  ;======================================================================
001284 04D5                  ; NRET    n       -               ( POP(RSP)->IP, RSP-=N )
001285 04D5                  ;======================================================================
001286 04D5 EC               vmnret:   mov   A,R4      ; RSP low
001287 04D6 F582                       mov   dpl,A
001288 04D8 C3                         clr   C     
001289 04D9 9402                       subb  A,#2
001290 04DB FC                         mov   R4,A
001291 04DC ED                         mov   A,R5      ; RSP high
001292 04DD F583                       mov   dph,A
001293 04DF 9400                       subb  A,#0
001294 04E1 FD                         mov   R5,A
001295 04E2                  
001296 04E2                            ; Subtract N from RSP
001297 04E2 EC                         mov   A,R4      ; RSP low
001298 04E3 C3                         clr   C
001299 04E4 97                         subb  A,@R1
001300 04E5 FC                         mov   R4,A
001301 04E6 09                         inc   R1   
001302 04E7 ED                         mov   A,R5      ; RSP high
001303 04E8 97                         subb  A,@R1
001304 04E9 FD                         mov   R5,A
001305 04EA 19                         dec   R1        ; drop
001306 04EB 19                         dec   R1
001307 04EC 19                         dec   R1
001308 04ED                  
001309 04ED                            ; RSP is decremented by 2 bytes + N, old tos (return addr)
001310 04ED                            ; is now pointed to by DPTR
001311 04ED E0                         movx  A,@dptr   ; return address ls byte
001312 04EE FE                         mov   R6,A      ; stuff in IP low
001313 04EF A3                         inc   dptr
001314 04F0 E0                         movx  A,@dptr   ; return address ms byte
001315 04F1 FF                         mov   R7,A      ; stuff in IP high
001316 04F2                  
001317 04F2 22                         ret
001318 04F3                  
001319 04F3                  ;======================================================================
001320 04F3                  ; CCALL   addr    -               ( call C fn at addr)
001321 04F3                  ;======================================================================
001322 04F3 8782             vmccall:  mov   dpl,@R1
001323 04F5 09                         inc   R1
001324 04F6 8783                       mov   dph,@R1
001325 04F8 19                         dec   R1
001326 04F9 19                         dec   R1
001327 04FA 19                         dec   R1
001328 04FB E4                         clr   A
001329 04FC 73                         jmp     @a+dptr     ; jump to table - use exiting return addr
001330 04FD                  
001331 04FD                  ;======================================================================
001332 04FD                  ; DUP     n     -  n,n            ( duplicate TOS )
001333 04FD                  ;======================================================================
001334 04FD E9               vmdup:    mov  A,R1
001335 04FE F8                         mov  R0,A
001336 04FF 08                         inc  R0
001337 0500 08                         inc  R0
001338 0501 E7                         mov  A,@R1
001339 0502 F6                         mov  @R0,A
001340 0503 08                         inc  R0
001341 0504 09                         inc  R1
001342 0505 E7                         mov  A,@R1
001343 0506 F6                         mov  @R0,A
001344 0507 09                         inc  R1
001345 0508 22                         ret
001346 0509                  
001347 0509                  ;======================================================================
001348 0509                  ; OVER    a,b   -  a,b,a          ( pick 2nd TOS )
001349 0509                  ;======================================================================
001350 0509 E9               vmover:   mov  A,R1
001351 050A F8                         mov  R0,A
001352 050B 18                         dec  R0     ; R0 -> 2TOS
001353 050C 18                         dec  R0
001354 050D 09                         inc  R1     ; R1 -> TOS+1
001355 050E 09                         inc  R1
001356 050F E6                         mov  A,@R0
001357 0510 F7                         mov  @R1,A
001358 0511 08                         inc  R0
001359 0512 09                         inc  R1
001360 0513 E6                         mov  A,@R0
001361 0514 F7                         mov  @R1,A
001362 0515 19                         dec  R1
001363 0516 22                         ret
001364 0517                  
001365 0517                  ;======================================================================
001366 0517                  ; DROP    a     -                 ( drop TOS )
001367 0517                  ;======================================================================
001368 0517 19               vmdrop:   dec   R1
001369 0518 19                         dec   R1
001370 0519 22                         ret
001371 051A                  
001372 051A                  ;======================================================================
001373 051A                  ; PICK    (..)n -  (..) n-th item ( pick n-TOS )
001374 051A                  ; Note cheat - high byte of n is ignored as SP is only 8-bit anyway.
001375 051A                  ;======================================================================
001376 051A E7               vmpick:   mov   A,@R1
001377 051B 27                         add   A,@R1   ; 2 * n
001378 051C F5F0                       mov   B,A
001379 051E E9                         mov   A,R1
001380 051F C3                         clr   C
001381 0520 95F0                       subb  A,B     ; subtract offset from ESP
001382 0522 F8                         mov   R0,A
001383 0523                  
001384 0523                            ; copy the word from n-TOS to TOS
001385 0523 E6                         mov   A,@R0
001386 0524 F7                         mov   @R1,A
001387 0525 08                         inc   R0
001388 0526 09                         inc   R1
001389 0527 E6                         mov   A,@R0
001390 0528 F7                         mov   @R1,A
001391 0529 19                         dec   R1
001392 052A                  
001393 052A 22                         ret
001394 052B                  
001395 052B                  ;======================================================================
001396 052B                  ; SWAP    a,b   -  b,a            ( swap TOS and 2-TOS )
001397 052B                  ;======================================================================
001398 052B E9               vmswap:   mov   A,R1
001399 052C F8                         mov   R0,A
001400 052D 18                         dec   R0    ; R0 -> 2TOS
001401 052E 18                         dec   R0
001402 052F                            
001403 052F E6                         mov   A,@R0     ; swap ls byte
001404 0530 C7                         xch   A,@R1
001405 0531 F6               		  mov   @R0,A
001406 0532                  
001407 0532 08                         inc   R0
001408 0533 09                         inc   R1
001409 0534                  
001410 0534 E6                         mov   A,@R0     ; swap ms byte
001411 0535 C7                         xch   A,@R1
001412 0536 F6               		  mov   @R0,A
001413 0537                  
001414 0537 19                         dec   R1
001415 0538 22                         ret
001416 0539                  
001417 0539                  ;======================================================================
001418 0539                  ; REPL    a,b   -  b              ( replace 2-TOS with TOS )
001419 0539                  ;======================================================================
001420 0539 E9               vmrepl:   mov   A,R1
001421 053A F8                         mov   R0,A
001422 053B 19                         dec   R1   
001423 053C 08                         inc   R0
001424 053D                  
001425 053D E6                         mov   A,@R0
001426 053E F7                         mov   @R1,A
001427 053F                  
001428 053F 18                         dec   R0
001429 0540 19                         dec   R1
001430 0541                  
001431 0541 E6                         mov   A,@R0
001432 0542 F7                         mov   @R1,A
001433 0543 22                         ret
001434 0544                  
001435 0544                  ;======================================================================
001436 0544                  ; ST      v,a   -                 ( [a] = v)
001437 0544                  ;======================================================================
001438 0544 8782             vmst:     mov   dpl,@R1
001439 0546 09                         inc   R1
001440 0547 8783                       mov   dph,@R1
001441 0549 19                         dec   R1
001442 054A                  
001443 054A 19                         dec   R1
001444 054B 19                         dec   R1
001445 054C                  
001446 054C E7                         mov   A,@R1
001447 054D F0                         movx  @dptr,A
001448 054E A3                         inc   dptr
001449 054F 09                         inc   R1
001450 0550 E7                         mov   A,@R1
001451 0551 F0                         movx  @dptr,A
001452 0552 19                         dec   R1
001453 0553                  
001454 0553 19               		  dec   R1
001455 0554 19               		  dec   R1
001456 0555                  
001457 0555 22                         ret
001458 0556                  
001459 0556                  ;======================================================================
001460 0556                  ; LD      a     -  v              ( v = [a] )
001461 0556                  ;======================================================================
001462 0556 8782             vmld:     mov   dpl,@R1
001463 0558 09                         inc   R1
001464 0559 8783                       mov   dph,@R1
001465 055B 19                         dec   R1
001466 055C                            
001467 055C E0                         movx  A,@dptr
001468 055D F7                         mov   @R1,A
001469 055E                            
001470 055E 09                         inc   R1
001471 055F A3                         inc   dptr
001472 0560                  
001473 0560 E0                         movx  A,@dptr
001474 0561 F7                         mov   @R1,A
001475 0562                  
001476 0562 19                         dec   R1
001477 0563 22                         ret
001478 0564                  
001479 0564                  ;======================================================================
001480 0564                  ; CST     c,a   -                 ( character store)
001481 0564                  ;======================================================================
001482 0564 8782             vmcst:    mov   dpl,@R1
001483 0566 09                         inc   R1
001484 0567 8783                       mov   dph,@R1
001485 0569 19                         dec   R1
001486 056A                  
001487 056A 19                         dec   R1          ; pt to char
001488 056B 19                         dec   R1
001489 056C                  
001490 056C E7                         mov   A,@R1       ; store char
001491 056D F0                         movx  @dptr,A
001492 056E                  
001493 056E 19                         dec   R1          ; drop char
001494 056F 19                         dec   R1
001495 0570                  
001496 0570 22                         ret
001497 0571                  
001498 0571                  ;======================================================================
001499 0571                  ; CLD     a     -  c              ( character fetch)
001500 0571                  ;======================================================================
001501 0571 8782             vmcld:    mov   dpl,@R1
001502 0573 09                         inc   R1
001503 0574 8783                       mov   dph,@R1
001504 0576 7700                       mov   @R1,#0      ; zero ms byte of result
001505 0578 19                         dec   R1
001506 0579                            
001507 0579 E0                         movx  A,@dptr     ; get & store char result
001508 057A F7                         mov   @R1,A
001509 057B                  
001510 057B 22                         ret
001511 057C                  
001512 057C                  ;======================================================================
001513 057C                  ; DATA    n     -  a              ( skip n bytes,& push original IP)
001514 057C                  ; Use for setting up inline data.
001515 057C                  ;======================================================================
001516 057C 8E82             vmdata:   mov   dpl,R6  ; IP low - save original IP - where data is
001517 057E 8F83                       mov   dph,R7  ; IP low
001518 0580 E7                         mov   A,@R1
001519 0581 2E                         add   A,R6    ; ls IP+N
001520 0582 FE                         mov   R6,A
001521 0583                            
001522 0583 E582                       mov   A,dpl   ; replace ls N with ls Addr
001523 0585 F7                         mov   @R1,A
001524 0586                  
001525 0586 09                         inc   R1
001526 0587                  
001527 0587 E7                         mov   A,@R1   ; ms IP+N
001528 0588 3F                         addc  A,R7
001529 0589 FF                         mov   R7,A
001530 058A                  
001531 058A E583                       mov   A,dph	; replace MS n with MS addr
001532 058C F7                         mov   @R1,A
001533 058D                  
001534 058D 19                         dec   R1
001535 058E 22                         ret
001536 058F                  
001537 058F                  
001538 058F                  
001539 058F                  ;======================================================================
001540 058F                  ; TOR     n    -                  ( tos to return stack )
001541 058F                  ;======================================================================
001542 058F EC               vmtor:    mov   A,R4    ; RS low
001543 0590 2402                       add   A,#2
001544 0592 F582                       mov   dpl,A
001545 0594 FC                         mov   R4,A
001546 0595 ED                         mov   A,R5    ; RS high
001547 0596 3400                       addc  A,#0
001548 0598 F583                       mov   dph,A
001549 059A FD                         mov   R5,A
001550 059B                  
001551 059B E7                         mov   A,@R1
001552 059C F0                         movx  @dptr,A
001553 059D                  
001554 059D 09                         inc   R1
001555 059E A3                         inc   dptr
001556 059F                  
001557 059F E7                         mov   A,@R1
001558 05A0 F0                         movx  @dptr,A
001559 05A1                  
001560 05A1 19                         dec   R1
001561 05A2 19                         dec   R1
001562 05A3 19                         dec   R1
001563 05A4                  
001564 05A4 22                         ret
001565 05A5                  
001566 05A5                  ;======================================================================
001567 05A5                  ; FROMR        - n                ( return stack to tos )
001568 05A5                  ;======================================================================
001569 05A5 8C82             vmfromr:  mov   dpl,R4      ;load RSP to dptr
001570 05A7 8D83                       mov   dph,R5      
001571 05A9                            
001572 05A9 09                         inc   R1          ; pt R1 where new TOS will go
001573 05AA 09                         inc   R1
001574 05AB                  
001575 05AB                            ; mov (RSP) to (TOS)
001576 05AB E0                         movx  A,@dptr
001577 05AC F7                         mov   @R1,A
001578 05AD 09                         inc   R1
001579 05AE A3                         inc   dptr
001580 05AF E0                         movx  A,@dptr
001581 05B0 F7                         mov   @R1,A
001582 05B1 19                         dec   R1
001583 05B2                  
001584 05B2                            ; drop RSP by 2 bytes
001585 05B2 EC                         mov   A,R4
001586 05B3 C3                         clr   C
001587 05B4 9402                       subb  A,#2
001588 05B6 FC                         mov   R4,A
001589 05B7 ED                         mov   A,R5
001590 05B8 9400                       subb  A,#0
001591 05BA FD                         mov   R5,A
001592 05BB                  
001593 05BB 22                         ret
001594 05BC                  
001595 05BC                  ;======================================================================
001596 05BC                  ; FPADD   n    - FP+n             ( push FP+n )
001597 05BC                  ;======================================================================
001598 05BC E7               vmfpadd:  mov   A,@R1 
001599 05BD 2A                         add   A,R2      ; FP low
001600 05BE F7                         mov   @R1,A
001601 05BF                  
001602 05BF 09                         inc   R1
001603 05C0 E7                         mov   A,@R1
001604 05C1 3B                         addc  A,R3      ; FP high
001605 05C2 F7                         mov   @R1,A
001606 05C3                  
001607 05C3 19                         dec   R1
001608 05C4 22                         ret
001609 05C5                  
001610 05C5                  ;======================================================================
001611 05C5                  ; FPLD    n    - val              ( return stack[FP+n] ->tos )
001612 05C5                  ;======================================================================
001613 05C5 EA               vmfpld:   mov   A,R2      ; FP low
001614 05C6 27                         add   A,@R1     ; + n low
001615 05C7 F582                       mov   dpl,A     
001616 05C9 09                         inc   R1
001617 05CA EB                         mov   A,R3
001618 05CB 37                         addc  A,@R1
001619 05CC F583                       mov   dph,A
001620 05CE 19                         dec   R1        
001621 05CF                  
001622 05CF                            ; now FP+n is in dptr, move data to tos
001623 05CF E0                         movx  A,@dptr
001624 05D0 F7                         mov   @R1,A
001625 05D1                            
001626 05D1 09                         inc   R1
001627 05D2 A3                         inc   dptr
001628 05D3                  
001629 05D3 E0                         movx  A,@dptr
001630 05D4 F7                         mov   @R1,A
001631 05D5                            
001632 05D5 19                         dec   R1
001633 05D6 22                         ret
001634 05D7                  
001635 05D7                  ;======================================================================
001636 05D7                  ; FPST    v,n  -                  ( 2tos -> return stack[FP+n] )
001637 05D7                  ;======================================================================
001638 05D7 EA               vmfpst:   mov   A,R2      ; FP low
001639 05D8 27                         add   A,@R1     ; + n low
001640 05D9 F582                       mov   dpl,A     
001641 05DB 09                         inc   R1
001642 05DC EB                         mov   A,R3
001643 05DD 37                         addc  A,@R1
001644 05DE F583                       mov   dph,A
001645 05E0 19                         dec   R1        
001646 05E1                            
001647 05E1 19                         dec   R1
001648 05E2 19                         dec   R1
001649 05E3 E7                         mov   A,@R1
001650 05E4 F0                         movx  @dptr,A
001651 05E5 09                         inc   R1
001652 05E6 A3                         inc   dptr
001653 05E7 E7                         mov   A,@R1
001654 05E8 F0                         movx  @dptr,A
001655 05E9 19                         dec   R1
001656 05EA                  
001657 05EA 19               		  dec   R1
001658 05EB 19               		  dec   R1
001659 05EC 22                         ret
001660 05ED                  
001661 05ED                  ;======================================================================
001662 05ED                  ; FPCLD   n    - c                ( return stack[FP+n] -> tos (char load ))
001663 05ED                  ;======================================================================
001664 05ED EA               vmfpcld:  mov   A,R2      ; FP low
001665 05EE 27                         add   A,@R1     ; + n low
001666 05EF F582                       mov   dpl,A     
001667 05F1 09                         inc   R1
001668 05F2 EB                         mov   A,R3
001669 05F3 37                         addc  A,@R1
001670 05F4 F583                       mov   dph,A
001671 05F6 7700                       mov   @R1,#0    ; set MSB of char to 16 bit.
001672 05F8 19                         dec   R1        
001673 05F9                  
001674 05F9                            ; now FP+n is in dptr, move char data to tos
001675 05F9 E0                         movx  A,@dptr
001676 05FA F7                         mov   @R1,A
001677 05FB                            
001678 05FB 22                         ret
001679 05FC                  
001680 05FC                  ;======================================================================
001681 05FC                  ; FPCST   c,n  -                  ( 2tos -> (char) return stack[FP+n] )
001682 05FC                  ;======================================================================
001683 05FC EA               vmfpcst:  mov   A,R2      ; FP low
001684 05FD 27                         add   A,@R1     ; + n low
001685 05FE F582                       mov   dpl,A     
001686 0600 09                         inc   R1
001687 0601 EB                         mov   A,R3
001688 0602 37                         addc  A,@R1
001689 0603 F583                       mov   dph,A
001690 0605 19                         dec   R1        
001691 0606                            
001692 0606 19                         dec   R1
001693 0607 19                         dec   R1
001694 0608                  
001695 0608 E7                         mov   A,@R1
001696 0609 F0                         movx  @dptr,A
001697 060A                           
001698 060A 19               		  dec   R1
001699 060B 19               		  dec   R1
001700 060C 22                         ret
001701 060D                  
001702 060D                  ;======================================================================
001703 060D                  ; HALT            -               ( halt execution )
001704 060D                  ;======================================================================
001705 060D 750001           vmhalt:   mov vmfltc,#vHalt       ; halt fault
                                           ^
  *****  Warning  ***** undefined symbol on second pass
001706 0610 D200                       setb vmfstop            ; set stop flag
                                            ^
  *****  Warning  ***** undefined symbol on second pass
001707 0612 22                         ret
001708 0613                  
001709 0613                  ;======================================================================
001710 0613                  ; FAULT   n       -               ( raise fault n & halt execution )
001711 0613                  ;======================================================================
001712 0613 E7               vmfault:  mov   A,@R1             ; get (byte) fault code
001713 0614 19               		  dec   R1
001714 0615 19                         dec   R1
001715 0616 F500                       mov vmfltc,A            ;
                                           ^
  *****  Warning  ***** undefined symbol on second pass
001716 0618 D200                       setb vmfstop            ; set stop flag
                                            ^
  *****  Warning  ***** undefined symbol on second pass
001717 061A 22                         ret
001718 061B                  
001719 061B                  ;======================================================================
001720 061B                  ; BND     v,l,u - v               ( check l<=v<=u (integer), fault if not )
001721 061B                  ;======================================================================
001722 061B E9               vmbnd:    mov   A,R1				; point r0 at u
001723 061C F8               		  mov   R0,A
001724 061D                  		  
001725 061D 19               		  dec   R1					; point R1 at v
001726 061E 19                         dec   R1
001727 061F 19                         dec   R1
001728 0620 19                         dec   R1
001729 0621                  
001730 0621                  		  ; R1 points to v, R0 to u
001731 0621                  		  ; if u-v is -ve then fault
001732 0621 C3               		  clr 	C
001733 0622 E6               		  mov 	A,@R0			   ; u
001734 0623 97               		  subb	A,@R1			   ; - v
001735 0624 08               		  inc	R0				   ; to MS bytes
001736 0625 09               		  inc 	R1
001737 0626 E6               		  mov   A,@R0			   ; u
001738 0627 97               		  subb	A,@R1			   ; - v
001739 0628 18               	      dec	R0
001740 0629 19               		  dec   R1
001741 062A 20E70E           		  jb Acc.7,vmbndf			; -ve if bit 7 set from v > u
001742 062D                  
001743 062D 18               		  dec	R0				   ; point R0 at l
001744 062E 18               		  dec   R0
001745 062F                  
001746 062F                  		  ; R1 points to v, R0 to l
001747 062F                  		  ; if v-l is -ve then fault
001748 062F C3               		  clr 	C
001749 0630 E7               		  mov 	A,@R1			   ; v
001750 0631 96               		  subb	A,@R0			   ; - l
001751 0632 08               		  inc	R0
001752 0633 09               		  inc 	R1
001753 0634 E7               		  mov   A,@R1
001754 0635 96               		  subb	A,@R0
001755 0636 19               		  dec   R1
001756 0637 20E701           		  jb Acc.7,vmbndf		   ; -ve if l > v
001757 063A                  		  
001758 063A 22               		  ret	; no fault
001759 063B                  
001760 063B 750003           vmbndf:	  mov 	vmfltc,#vBound
                                            ^
  *****  Warning  ***** undefined symbol on second pass
001761 063E D200             		  setb 	vmfStop
                                       ^
  *****  Warning  ***** undefined symbol on second pass
001762 0640 22                         ret
001763 0641                  
001764 0641                  ;======================================================================
001765 0641                  ; ALLOC   n     - a               ( allocates n bytes on RS, returns its addr )
001766 0641                  ;======================================================================
001767 0641 EC               vmalloc:  mov   A,R4    ; RSP low
001768 0642 F582                       mov   dpl,A   ; save temp copy
001769 0644 27                         add   A,@R1   ; bump RSP
001770 0645 FC                         mov   R4,A
001771 0646                            
001772 0646 09                         inc   R1
001773 0647 ED                         mov   A,R5
001774 0648 F583                       mov   dph,A
001775 064A 37                         addc  A,@R1
001776 064B FD                         mov   R5,A
001777 064C                  
001778 064C A3               		  inc   dptr	; RSP points to top element on stack so we need
001779 064D A3               		  inc   dptr	; to skip over that to return correct address
001780 064E                  
001781 064E A783                       mov   @R1,dph
001782 0650 19                         dec   R1
001783 0651 A782                       mov   @R1,dpl
001784 0653                  
001785 0653 22                         ret
001786 0654                  
001787 0654                  ;======================================================================
001788 0654                  ; MOV     s,d,n -                 ( move n bytes from source to dest )
001789 0654                  ; Uses source pointer in vpstratc + 0 & +1
001790 0654                  ; Dest pointer in vpscratch +2 & +3
001791 0654                  ; Byte count in vpscratc +4 & +5
001792 0654                  ;======================================================================
001793 0654 09               vmmov:    inc   R1            ; n -> vpscratc + 4
001794 0655 8705                       mov   vpscratc+5,@R1
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001795 0657 19                         dec   R1
001796 0658 8704                       mov   vpscratc+4,@R1
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001797 065A 19               		  dec   R1
001798 065B                  
001799 065B 8703                       mov   vpscratc+3,@R1 ; d -> vpscratc + 2
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001800 065D 19                         dec   R1
001801 065E 8702                       mov   vpscratc+2,@R1
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001802 0660 19               		  dec   R1
001803 0661                  
001804 0661 8701                       mov   vpscratc+1,@R1  ; s -> vpscratc + 0
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001805 0663 19                         dec   R1
001806 0664 8700                       mov   vpscratc+0,@R1
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001807 0666 19               		  dec   R1
001808 0667                  
001809 0667 19               		  dec   R1
001810 0668                  
001811 0668 E504             vmmovlp:  mov   A,vpscratc+4
                                               ^
  *****  Warning  ***** undefined symbol on second pass
001812 066A 4505                       orl   A,vpscratc+5
                                               ^
  *****  Warning  ***** undefined symbol on second pass
001813 066C 602B                       jz    vmmove
001814 066E                  
001815 066E                            ;Get a byte from source & bump source addr
001816 066E 850082                     mov   dpl,vpscratc+0
                                                 ^
  *****  Warning  ***** undefined symbol on second pass
001817 0671 850183                     mov   dph,vpscratc+1
                                                 ^
  *****  Warning  ***** undefined symbol on second pass
001818 0674 E0                         movx  A,@dptr
001819 0675 A3                         inc   dptr
001820 0676 858200                     mov   vpscratc+0,dpl
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001821 0679 858301                     mov   vpscratc+1,dph
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001822 067C                  
001823 067C                            ;Write a byte to dest & bump dest addr
001824 067C 850282                     mov   dpl,vpscratc+2
                                                 ^
  *****  Warning  ***** undefined symbol on second pass
001825 067F 850383                     mov   dph,vpscratc+3
                                                 ^
  *****  Warning  ***** undefined symbol on second pass
001826 0682 F0                         movx  @dptr,A
001827 0683 A3                         inc   dptr
001828 0684 858202                     mov   vpscratc+2,dpl
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001829 0687 858303                     mov   vpscratc+3,dph
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001830 068A                  
001831 068A                            ;Decrement counter
001832 068A E504                       mov   A,vpscratc+4
                                               ^
  *****  Warning  ***** undefined symbol on second pass
001833 068C C3                         clr   C
001834 068D 9401                       subb  A,#1
001835 068F F504                       mov   vpscratc+4,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001836 0691 E505                       mov   A,vpscratc+5
                                               ^
  *****  Warning  ***** undefined symbol on second pass
001837 0693 9400                       subb  A,#0
001838 0695 F505                       mov   vpscratc+5,A
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001839 0697                  
001840 0697 80CF                       sjmp  vmmovlp
001841 0699 22               vmmove:   ret
001842 069A                  
001843 069A                  ;======================================================================
001844 069A                  ; ESC     -                       ( prefix to 2 byte opcodes)
001845 069A                  ;======================================================================
001846 069A 8E82             vmesc:    mov   dpl,R6          ; load IP into dptr
001847 069C 8F83                       mov   dph,R7
001848 069E E0                         movx  A,@dptr         ; get opcode
001849 069F A3                         inc   dptr            ; ++IP
001850 06A0 AE82                       mov   R6,dpl          ; save IP
001851 06A2 AF83                       mov   R7,dph
001852 06A4                  
001853 06A4 020000                     ljmp  vxDisp          ; execute extension
                                             ^
  *****  Warning  ***** undefined symbol on second pass
001854 06A7                  
001855 06A7                  

AC              =00D6  IP              =00B8  PT1             =00BB  TR0             =008C  VMMOD           =028E  
ACC             =00E0  IP.0            =00B8  PT2             =00BD  TR1             =008E  VMMOV           =0654  
ACC.0           =00E0  IP.1            =00B9  PX0             =00B8  TR2             =00CA  VMMOVE          =0699  
ACC.1           =00E1  IP.2            =00BA  PX1             =00BA  TXD             =00B1  VMMOVLP         =0668  
ACC.2           =00E2  IP.3            =00BB  QUOT            =017E  UMUL32          =00F6  VMMULD          =03FF  
ACC.3           =00E3  IP.4            =00BC  RB8             =009A  VBOUND          =0003  VMMULT          =022B  
ACC.4           =00E4  IP.5            =00BD  RCAP2H          =00CB  VESOVF          =0005  VMNEQU          =032A  
ACC.5           =00E5  IP.6            =00BE  RCAP2L          =00CA  VESUND          =0004  VMNEQUF         =0340  
ACC.6           =00E6  IP.7            =00BF  RCLK            =00CD  VHALT           =0001  VMNINV          =0206  
ACC.7           =00E7  IT0             =0088  REN             =009C  VILLEG          =0002  VMNOP           =020D  
B               =00F0  IT1             =008A  RI              =0098  VMADD           =020E  VMNOT           =0304  
B.0             =00F0  OP_0            =0000  RS0             =00D3  VMALLOC         =0641  VMNRET          =04D5  
B.1             =00F1  OP_1            =0000  RS1             =00D4  VMAND           =02E8  VMOR            =02F6  
B.2             =00F2  OP_2            =0000  RXD             =00B0  VMBND           =061B  VMOVER          =0509  
B.3             =00F3  OP_3            =0000  SBUF            =0099  VMBNDF          =063B  VMPICK          =051A  
B.4             =00F4  OV              =00D2  SCON            =0098  VMBRA           =0450  VMREPL          =0539  
B.5             =00F5  P               =00D0  SCON.0          =0098  VMCALL          =046F  VMRESET         =000B  
B.6             =00F6  P0              =0080  SCON.1          =0099  VMCCALL         =04F3  VMRET           =04C2  
B.7             =00F7  P0.0            =0080  SCON.2          =009A  VMCLD           =0571  VMRSTK          =0000  
CANSUB          =0173  P0.1            =0081  SCON.3          =009B  VMCMP           =01C4  VMRUN           =0022  
CANTSUB         =017D  P0.2            =0082  SCON.4          =009C  VMCST           =0564  VMRUNE          =0029  
CCAPM0          =00DA  P0.3            =0083  SCON.5          =009D  VMDATA          =057C  VMSGN2          =0000  
CCAPM1          =00DB  P0.4            =0084  SCON.6          =009E  VMDEC           =02DC  VMSIGN          =0000  
CCAPM2          =00DC  P0.5            =0085  SCON.7          =009F  VMDIS0          =0069  VMSRSP          =002E  
CCAPM3          =00DD  P0.6            =0086  SHIFTD          =0199  VMDIS1          =0058  VMST            =0544  
CCAPM4          =00DE  P0.7            =0087  SHIFTQ          =01AF  VMDIS2          =0067  VMSTART         =001B  
CCON            =00D8  P1              =0090  SM0             =009F  VMDISP          =0039  VMSUB           =021C  
CCON.0          =00D8  P1.0            =0090  SM1             =009E  VMDIV           =0248  VMSWAP          =052B  
CCON.1          =00D9  P1.1            =0091  SM2             =009D  VMDM            =03A2  VMTOR           =058F  
CCON.2          =00DA  P1.2            =0092  SP              =0081  VMDROP          =0517  VMUDIV          =0257  
CCON.3          =00DB  P1.3            =0093  T2CON           =00C8  VMDUP           =04FD  VMUDM           =03C0  
CCON.4          =00DC  P1.4            =0094  T2CON.0         =00C8  VMENTER         =0489  VMUMD           =040E  
CCON.5          =00DD  P1.5            =0095  T2CON.1         =00C9  VMEQU           =030E  VMUMOD          =029A  
CCON.6          =00DE  P1.6            =0096  T2CON.2         =00CA  VMEQUT          =0324  VMUMUL          =023A  
CCON.7          =00DF  P1.7            =0097  T2CON.3         =00CB  VMESC           =069A  VMZBRA          =045B  
CMOD            =00D9  P2              =00A0  T2CON.4         =00CC  VMESTK          =0000  VMZBRF          =046A  
CPRL2           =00C8  P2.0            =00A0  T2CON.5         =00CD  VMFAULT         =0613  VMZEQT          =044A  
CT2             =00C9  P2.1            =00A1  T2CON.6         =00CE  VMFLTC          =0000  VMZEQU          =043F  
CY              =00D7  P2.2            =00A2  T2CON.7         =00CF  VMFPADD         =05BC  VNONE           =0000  
DIV_16          =014B  P2.3            =00A3  TB8             =009B  VMFPCLD         =05ED  VPSCRATC        =0000  
DIV_LP          =015D  P2.4            =00A4  TCLK            =00CC  VMFPCST         =05FC  VRSOVF          =0007  
DPH             =0083  P2.5            =00A5  TCON            =0088  VMFPLD          =05C5  VRSUND          =0006  
DPL             =0082  P2.6            =00A6  TCON.0          =0088  VMFPST          =05D7  VXDISP          =0000  
EA              =00AF  P2.7            =00A7  TCON.1          =0089  VMFROMR         =05A5  
ES              =00AC  P3              =00B0  TCON.2          =008A  VMFSTOP         =0000  
ET0             =00A9  P3.0            =00B0  TCON.3          =008B  VMGE            =038E  
ET1             =00AB  P3.1            =00B1  TCON.4          =008C  VMGEF           =039B  
ET2             =00AD  P3.2            =00B2  TCON.5          =008D  VMGT            =035A  
EX0             =00A8  P3.3            =00B3  TCON.6          =008E  VMGTF           =036D  
EX1             =00AA  P3.4            =00B4  TCON.7          =008F  VMHALT          =060D  
EXEN2           =00CB  P3.5            =00B5  TF0             =008D  VMIDLE          =002A  
EXF2            =00CE  P3.6            =00B6  TF1             =008F  VMILL           =0207  
F0              =00D5  P3.7            =00B7  TF2             =00CF  VMINC           =02D1  
IE              =00A8  PCON            =0087  TH0             =008C  VMINIT          =0000  
IE.0            =00A8  PS              =00BC  TH1             =008D  VMINVN          =01F8  
IE.1            =00A9  PSW             =00D0  TH2             =00CD  VMJMP           =0076  
IE.2            =00AA  PSW.0           =00D0  TI              =0099  VMLD            =0556  
IE.3            =00AB  PSW.1           =00D1  TL0             =008A  VMLE            =0374  
IE.4            =00AC  PSW.2           =00D2  TL1             =008B  VMLEAVE         =04AB  
IE.5            =00AD  PSW.3           =00D3  TL2             =00CC  VMLET           =0387  
IE.7            =00AF  PSW.4           =00D4  TMOD            =0089  VMLT            =0346  
IE0             =0089  PSW.5           =00D5  TMP_0           =0000  VMLTF           =0353  
IE1             =008B  PSW.6           =00D6  TMP_1           =0000  VMM2P           =01D5  
INT0            =00B2  PSW.7           =00D7  TMP_2           =0000  VMM2P0          =01E6  
INT1            =00B3  PT0             =00B9  TMP_3           =0000  VMM2P1          =01F6  
